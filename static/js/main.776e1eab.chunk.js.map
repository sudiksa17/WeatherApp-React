{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","noInput","role","wrongInput","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcons","id","console","log","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.776e1eab.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = props => {\r\n    return(\r\n        <div className=\"container text-light\">\r\n            <div className=\"cards pt-4 \">\r\n                <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\">\r\n    <i className = {`wi ${props.weatherIcon} display-1`}/>\r\n                </h5>\r\n    { props.temp_celsius  ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>) : null}\r\n\r\n                {/** show max and min temp */}\r\n                {minmaxTemp(props.temp_min,props.temp_max)}\r\n\r\n    <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction minmaxTemp(min, max){\r\n    if (min && max) {\r\n        return(\r\n            <h3>\r\n                <span className=\"px-4\">\r\n                    {min}&deg;\r\n                </span>\r\n                <span className=\"px-4\">\r\n                    {max}&deg;\r\n                </span>\r\n            </h3>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather","import React from 'react'\r\nimport \"./form.style.css\"\r\n\r\nconst Form = props => {\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.noInput ? noInput() : null}</div>\r\n            <div>{props.wrongInput ? wrongInput() : null}</div>\r\n            <form onSubmit={props.loadweather}> \r\n              <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input \r\n                    type=\"text\" \r\n                    className=\"form-control\"\r\n                    name=\"city\"\r\n                    autoComplete=\"off\"\r\n                    placeholder=\"City\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                  <input\r\n                   type=\"text\"\r\n                    className=\"form-control\"\r\n                 name=\"country\"\r\n                  autoComplete=\"off\"\r\n                  placeholder=\"Country\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div></form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction noInput(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction wrongInput(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Provide Correct City and Country\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react';\nimport './App.css';\n\nimport 'weather-icons/css/weather-icons.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Weather from './app_component/weather.component'\nimport Form from './app_component/form.component'\n\nconst API_key = \"f781a9e3b65a0f4f69f94a3ae472ebdb\"\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            city: undefined,\n            country: undefined,\n            icon: undefined,\n            main: undefined,\n            celsius: undefined,\n            temp_max: undefined,\n            temp_min: undefined,\n            description: \"\",\n            noInput: false,\n            wrongInput: false\n        }\n\n        this.weatherIcon = {\n            Thunderstorm: \"wi-thunderstorm\",\n            Drizzle: \"wi-sleet\",\n            Rain: \"wi-storm-showers\",\n            Snow: \"wi-snow\",\n            Atmosphere: \"wi-fog\",\n            Clear: \"wi-day-sunny\",\n            Clouds: \"wi-day-fog\"\n        }\n    }\n\n    calCelsius(temp) {\n        let cell = Math.floor(temp - 273.15)\n        return cell\n    }\n\n    get_WeatherIcons(icons, rangeId) {\n        switch (true) {\n            case rangeId >= 200 && rangeId <= 232:\n                this.setState({ icon: this.weatherIcon.Thunderstorm })\n                break\n            case rangeId >= 300 && rangeId <= 321:\n                this.setState({ icon: this.weatherIcon.Drizzle })\n                break\n            case rangeId >= 500 && rangeId <= 531:\n                this.setState({ icon: this.weatherIcon.Rain })\n                break\n            case rangeId >= 600 && rangeId <= 622:\n                this.setState({ icon: this.weatherIcon.Snow })\n                break\n            case rangeId >= 701 && rangeId <= 781:\n                this.setState({ icon: this.weatherIcon.Atmosphere })\n                break\n            case rangeId === 800:\n                this.setState({ icon: this.weatherIcon.Clear })\n                break\n            case rangeId >= 801 && rangeId <= 804:\n                this.setState({ icon: this.weatherIcon.Clouds })\n                break\n            default:\n                this.setState({ icon: this.weatherIcon.Clouds })\n        }\n    }\n\n    getWeather = async(e) => {\n        e.preventDefault()\n        const city = e.target.elements.city.value\n        const country = e.target.elements.country.value\n\n        if (city && country) {\n            const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`)\n\n            const response = await api_call.json()\n\n            this.setState({\n                city: `${response.name},${response.sys.country}`,\n                celsius: this.calCelsius(response.main.temp),\n                description: response.weather[0].description,\n                temp_max: this.calCelsius(response.main.temp_max),\n                temp_min: this.calCelsius(response.main.temp_min),\n                noInput: false,\n                wrongInput: false\n            })\n\n            this.get_WeatherIcons(this.weatherIcon, response.weather[0].id)\n\n\n            console.log(response)\n\n\n        } else {\n            this.setState({ noInput: true })\n        }\n    }\n\n    render() {\n        return ( <\n            div className = \"App\" >\n            <\n            Form loadweather = { this.getWeather }\n            noInput = { this.state.noInput }\n            wrongInput = { this.state.wrongInput }\n            />\n\n            <\n            Weather city = { this.state.city }\n            temp_celsius = { this.state.celsius }\n            temp_max = { this.state.temp_max }\n            temp_min = { this.state.temp_min }\n            description = { this.state.description }\n            weatherIcon = { this.state.icon }\n            /> </div >\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}